{"version":3,"sources":["components/images.js","App.js","serviceWorker.js","index.js"],"names":["Images","props","react_default","a","createElement","className","src","img","urls","thumb","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchRandomImages","UnSplash","applicationId","secret","callbackUrl","photos","getRandomPhoto","count","then","toJson","json","arr","state","data","i","length","push","setState","href","lib_default","dataLength","next","hasMore","loader","map","image","components_images","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSASeA,EANA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,IAAKL,EAAMM,IAAIC,KAAKC,SCgE3CC,qBA9Db,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KAaRiB,kBAAoB,WACD,IAAIC,IAAS,CAC5BC,cAAe,mEACfC,OAAQ,mEACRC,YAAa,2BAGNC,OAAOC,eAAe,CAACC,MAAO,KACtCC,KAAKC,UACLD,KAAK,SAAAE,GAKJ,IAHA,IAAIC,EAAMlB,EAAKmB,MAAMC,KAGZC,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAC/BH,EAAIK,KAAKN,EAAKI,IAGhBrB,EAAKwB,SAAS,CACZJ,KAAMF,OA/BVlB,EAAKmB,MAAQ,CACXC,KAAM,IAHSpB,mFAWjBG,KAAKI,qDA4BE,IACCa,EAASjB,KAAKgB,MAAdC,KACR,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,2CACAH,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,KAAGgC,KAAK,iCAAR,eACZlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CACAmC,WAAYxB,KAAKgB,MAAMC,KAAKE,OAC5BM,KAAMzB,KAAKI,kBACXsB,SAAS,EACTC,OAAQvC,EAAAC,EAAAC,cAAA,wBAEP2B,EAAKW,IAAK,SAAAC,GAAK,OACdzC,EAAAC,EAAAC,cAACwC,EAAD,CAAQC,IAAKF,EAAMG,GAAIvC,IAAKoC,gBAtDpBI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.9c9a948f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Functional component to display images\r\nconst Images = (props) => {\r\n    return(\r\n        <img className=\"single-photo\" src={props.img.urls.thumb}/>\r\n    );\r\n}\r\n\r\nexport default Images;","import React, { Component } from 'react';\nimport UnSplash, { toJson } from 'unsplash-js';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Images from './components/images';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props) \n    this.state = {\n      data: []\n    }\n  }\n\n  \n  \n\n  componentDidMount() {\n    this.fetchRandomImages();\n  }\n\n  fetchRandomImages = () => {\n    const unsplash = new UnSplash({\n      applicationId: \"76bb6285cf43bd300d2bf95da9dfa3658729c5770c211ba53756cc7e1493f594\",\n      secret: \"7059170e8e0467f99b8a80951d30c21acba4bd8809317bcdabf05946aa4a93c7\",\n      callbackUrl: \"http://localhost:3000/\"\n    });\n\n    unsplash.photos.getRandomPhoto({count: 30})\n    .then(toJson)\n    .then(json => {\n      // Temp array to store the current state\n      let arr = this.state.data;\n\n      // for loop to push each element of json array to temp array\n      for (var i = 0; i < json.length; i++) {\n        arr.push(json[i]);\n      }\n      // set state to the contents of temp array\n      this.setState({\n        data: arr\n      });\n    })\n  }\n\n\n  render() {\n    const { data } = this.state;\n    return (\n      <div className=\"App\">\n      <h1 className=\"heading\">Infinite Scroll UnSplash Code Challenge</h1>\n      <p>Coded by <a href=\"http://zachlynch123.github.io\">Zach Lynch</a></p>\n      <div className=\"images\">\n        <InfiniteScroll\n        dataLength={this.state.data.length}\n        next={this.fetchRandomImages}\n        hasMore={true}\n        loader={<h4>loading..</h4>}\n        >\n        {data.map( image => \n          <Images key={image.id} img={image} />\n        )}\n        </InfiniteScroll>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}